schema {
  query: Query
  mutation: Mutation
}

type Basket {
  items: [BasketItem]
  id: ID!
  ownerId: ID!
  basketType: BasketTypes!
}

type BasketItem {
  id: ID!
  name: String
  description: String
  photo: String
  quantity: Int
}

type Item {
  sections: [Section]
  ingredients: [ItemIngredient]
  id: ID!
  name: String!
  description: String
  photo: String
}

"A connection to a list of items."
type ItemConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ItemEdge!]
  "A flattened list of the nodes."
  nodes: [Item!]
}

"An edge in a connection."
type ItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Item!
}

type ItemIngredient {
  id: ID!
  name: String
  description: String
  photo: String
  quantity: Int
}

type Menu {
  sections(first: Int after: String last: Int before: String): SectionConnection
  id: ID!
  name: String!
  description: String
  introduction: String
  footer: String
  photo: String
}

"A connection to a list of items."
type MenuConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MenuEdge!]
  "A flattened list of the nodes."
  nodes: [Menu!]
}

"An edge in a connection."
type MenuEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Menu!
}

type Mutation {
  addBasketItem(input: BasketItemInput!): UpdateBasketPayload!
  updateBasketItem(input: BasketItemInput!): UpdateBasketPayload!
  removeBasketItem(input: BasketItemDeleteInput!): UpdateBasketPayload!
  clearBasket(id: ID!): UpdateBasketPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  basketByOwnerId(id: ID!): Basket!
  itemById(id: ID!): Item!
  menus(first: Int after: String last: Int before: String): MenuConnection
  menuById(id: ID!): Menu!
  sectionById(id: ID!): Section!
}

type Section {
  menu: Menu
  items(first: Int after: String last: Int before: String): ItemConnection
  id: ID!
  name: String!
  description: String
  introduction: String
  footer: String
  photo: String
  displayOrder: Int
}

"A connection to a list of items."
type SectionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SectionEdge!]
  "A flattened list of the nodes."
  nodes: [Section!]
}

"An edge in a connection."
type SectionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Section!
}

type UpdateBasketPayload {
  basket: Basket
  errors: [UserError!]
}

type UserError {
  message: String!
  code: String!
}

input BasketItemDeleteInput {
  basketId: ID!
  itemId: ID!
}

input BasketItemInput {
  basketId: ID!
  itemId: ID!
  quantity: Int!
}

enum BasketTypes {
  ANONYMOUS
  CUSTOMER
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD
